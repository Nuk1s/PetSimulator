-- FixedHealthBars.lua - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï HP –±–∞—Ä—ã –±–µ–∑ –æ—à–∏–±–æ–∫
-- –ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤ StarterPlayer.StarterPlayerScripts (—É–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ HP —Å–∫—Ä–∏–ø—Ç—ã)

local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

print("üíö Fixed Health Bars Loading...")

local healthBars = {}

-- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ HP –±–∞—Ä–∞
local function createFixedHealthBar(object)
	if healthBars[object] then return healthBars[object] end

	local mainPart = object.PrimaryPart or object:FindFirstChildOfClass("BasePart")
	if not mainPart then return nil end

	-- –í—ã—á–∏—Å–ª—è–µ–º –≤—ã—Å–æ—Ç—É –æ–±—ä–µ–∫—Ç–∞
	local objectHeight = 0
	for _, part in pairs(object:GetDescendants()) do
		if part:IsA("BasePart") then
			local partTop = part.Position.Y + (part.Size.Y / 2)
			objectHeight = math.max(objectHeight, partTop - mainPart.Position.Y)
		end
	end

	-- Attachment –Ω–∞–¥ –æ–±—ä–µ–∫—Ç–æ–º
	local attachment = Instance.new("Attachment")
	attachment.Name = "FixedHPBar"
	attachment.Position = Vector3.new(0, objectHeight + 3, 0)
	attachment.Parent = mainPart

	-- Billboard GUI
	local hpGui = Instance.new("BillboardGui")
	hpGui.Name = "FixedHealthBar"
	hpGui.Size = UDim2.new(0, 110, 0, 30)
	hpGui.StudsOffset = Vector3.new(0, 1, 0)
	hpGui.Parent = attachment

	-- –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ–Ω
	local background = Instance.new("Frame")
	background.Size = UDim2.new(1, 0, 0.7, 0)
	background.Position = UDim2.new(0, 0, 0.1, 0)
	background.BackgroundColor3 = Color3.new(0.15, 0.15, 0.2)
	background.BorderSizePixel = 0
	background.Parent = hpGui

	local bgCorner = Instance.new("UICorner")
	bgCorner.CornerRadius = UDim.new(0, 8)
	bgCorner.Parent = background

	local bgStroke = Instance.new("UIStroke")
	bgStroke.Color = Color3.new(0.4, 0.5, 0.6)
	bgStroke.Thickness = 2
	bgStroke.Parent = background

	-- HP –ø–æ–ª–æ—Å–∫–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –±–µ–∑ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞)
	local healthBar = Instance.new("Frame")
	healthBar.Size = UDim2.new(1, -4, 1, -4)
	healthBar.Position = UDim2.new(0, 2, 0, 2)
	healthBar.BackgroundColor3 = Color3.new(0.2, 0.8, 0.3)
	healthBar.BorderSizePixel = 0
	healthBar.Parent = background

	local barCorner = Instance.new("UICorner")
	barCorner.CornerRadius = UDim.new(0, 6)
	barCorner.Parent = healthBar

	-- –¢–µ–∫—Å—Ç HP
	local hpText = Instance.new("TextLabel")
	hpText.Size = UDim2.new(1, 0, 0.3, 0)
	hpText.Position = UDim2.new(0, 0, 0.8, 0)
	hpText.BackgroundTransparency = 1
	hpText.Text = "100 / 100"
	hpText.TextColor3 = Color3.new(1, 1, 1)
	hpText.Font = Enum.Font.GothamMedium
	hpText.TextSize = 12
	hpText.TextStrokeTransparency = 0
	hpText.TextStrokeColor3 = Color3.new(0, 0, 0)
	hpText.Parent = hpGui

	local hpBarData = {
		gui = hpGui,
		bar = healthBar,
		text = hpText,
		attachment = attachment,
		object = object
	}

	healthBars[object] = hpBarData
	return hpBarData
end

-- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ HP –±–∞—Ä–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –±–µ–∑ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞)
local function updateHealthBar(hpBarData, currentHP, maxHP)
	if not hpBarData or not hpBarData.gui.Parent then return end

	local healthPercent = math.max(0, math.min(1, currentHP / maxHP))

	-- –ü–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
	local newSize = UDim2.new(healthPercent, -4, 1, -4)
	local sizeTween = TweenService:Create(
		hpBarData.bar,
		TweenInfo.new(0.3, Enum.EasingStyle.Quad),
		{Size = newSize}
	)
	sizeTween:Play()

	-- –ü—Ä–æ—Å—Ç—ã–µ —Ü–≤–µ—Ç–∞ –±–µ–∑ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
	local color = Color3.new(0.2, 0.8, 0.3) -- –ó–µ–ª–µ–Ω—ã–π
	if healthPercent < 0.5 then
		color = Color3.new(1, 0.8, 0.2) -- –ñ–µ–ª—Ç—ã–π
	end
	if healthPercent < 0.25 then
		color = Color3.new(1, 0.3, 0.2) -- –ö—Ä–∞—Å–Ω—ã–π
	end

	local colorTween = TweenService:Create(
		hpBarData.bar,
		TweenInfo.new(0.25, Enum.EasingStyle.Quad),
		{BackgroundColor3 = color}
	)
	colorTween:Play()

	-- –û–±—ã—á–Ω—ã–µ —Ü–∏—Ñ—Ä—ã HP
	hpBarData.text.Text = math.ceil(currentHP) .. " / " .. maxHP
end

-- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º HP –±–∞—Ä —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞—Ç–∞–∫–µ
local function showHealthBarForObject(object)
	if not object:GetAttribute("CurrentHP") or not object:GetAttribute("MaxHP") then return end

	local hpBarData = createFixedHealthBar(object)
	if hpBarData then
		hpBarData.gui.Enabled = true
	end
end

-- –°–∫—Ä—ã–≤–∞–µ–º HP –±–∞—Ä
local function hideHealthBarForObject(object)
	if healthBars[object] then
		healthBars[object].gui.Enabled = false
	end
end

-- –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
RunService.Heartbeat:Connect(function()
	for object, hpBarData in pairs(healthBars) do
		if object.Parent and hpBarData.gui.Parent and hpBarData.gui.Enabled then
			local currentHP = object:GetAttribute("CurrentHP")
			local maxHP = object:GetAttribute("MaxHP")

			if currentHP and maxHP and maxHP > 0 then
				updateHealthBar(hpBarData, currentHP, maxHP)
			end
		elseif not object.Parent then
			if hpBarData.attachment then
				hpBarData.attachment:Destroy()
			end
			healthBars[object] = nil
		end
	end
end)

-- –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ–±–≤–æ–¥–∫—É –æ–±—ä–µ–∫—Ç–æ–≤
task.spawn(function()
	while true do
		task.wait(0.5)

		for _, obj in pairs(workspace:GetDescendants()) do
			if obj:IsA("Model") and obj:GetAttribute("CurrentHP") then
				local hasHighlight = obj:FindFirstChild("AttackOutline")
				local hasHPBar = healthBars[obj]

				if hasHighlight and (not hasHPBar or not healthBars[obj].gui.Enabled) then
					showHealthBarForObject(obj)
				elseif not hasHighlight and hasHPBar and healthBars[obj].gui.Enabled then
					task.wait(1)
					hideHealthBarForObject(obj)
				end
			end
		end
	end
end)

-- –û—á–∏—Å—Ç–∫–∞
workspace.DescendantRemoving:Connect(function(obj)
	if healthBars[obj] then
		if healthBars[obj].attachment then
			healthBars[obj].attachment:Destroy()
		end
		healthBars[obj] = nil
	end
end)

print("‚úÖ Fixed Health Bars loaded!")